#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC5Skeleton
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MainDatabase")]
	public partial class Linq2SqlDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertVirtualRoomSet(VirtualRoomSet instance);
    partial void UpdateVirtualRoomSet(VirtualRoomSet instance);
    partial void DeleteVirtualRoomSet(VirtualRoomSet instance);
    partial void InsertUserSet(UserSet instance);
    partial void UpdateUserSet(UserSet instance);
    partial void DeleteUserSet(UserSet instance);
    partial void InsertDocumentSet(DocumentSet instance);
    partial void UpdateDocumentSet(DocumentSet instance);
    partial void DeleteDocumentSet(DocumentSet instance);
    partial void InsertDocumentSet_BinaryDocument(DocumentSet_BinaryDocument instance);
    partial void UpdateDocumentSet_BinaryDocument(DocumentSet_BinaryDocument instance);
    partial void DeleteDocumentSet_BinaryDocument(DocumentSet_BinaryDocument instance);
    #endregion
		
		public Linq2SqlDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MainDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Linq2SqlDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Linq2SqlDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Linq2SqlDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Linq2SqlDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<VirtualRoomSet> VirtualRoomSets
		{
			get
			{
				return this.GetTable<VirtualRoomSet>();
			}
		}
		
		public System.Data.Linq.Table<UserSet> UserSets
		{
			get
			{
				return this.GetTable<UserSet>();
			}
		}
		
		public System.Data.Linq.Table<DocumentSet> DocumentSets
		{
			get
			{
				return this.GetTable<DocumentSet>();
			}
		}
		
		public System.Data.Linq.Table<DocumentSet_BinaryDocument> DocumentSet_BinaryDocuments
		{
			get
			{
				return this.GetTable<DocumentSet_BinaryDocument>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VirtualRoomSet")]
	public partial class VirtualRoomSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<UserSet> _UserSets;
		
		private EntitySet<DocumentSet> _DocumentSets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public VirtualRoomSet()
		{
			this._UserSets = new EntitySet<UserSet>(new Action<UserSet>(this.attach_UserSets), new Action<UserSet>(this.detach_UserSets));
			this._DocumentSets = new EntitySet<DocumentSet>(new Action<DocumentSet>(this.attach_DocumentSets), new Action<DocumentSet>(this.detach_DocumentSets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VirtualRoomSet_UserSet", Storage="_UserSets", ThisKey="Id", OtherKey="VirtualRoomId")]
		public EntitySet<UserSet> UserSets
		{
			get
			{
				return this._UserSets;
			}
			set
			{
				this._UserSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VirtualRoomSet_DocumentSet", Storage="_DocumentSets", ThisKey="Id", OtherKey="VirtualRoomId")]
		public EntitySet<DocumentSet> DocumentSets
		{
			get
			{
				return this._DocumentSets;
			}
			set
			{
				this._DocumentSets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserSets(UserSet entity)
		{
			this.SendPropertyChanging();
			entity.VirtualRoomSet = this;
		}
		
		private void detach_UserSets(UserSet entity)
		{
			this.SendPropertyChanging();
			entity.VirtualRoomSet = null;
		}
		
		private void attach_DocumentSets(DocumentSet entity)
		{
			this.SendPropertyChanging();
			entity.VirtualRoomSet = this;
		}
		
		private void detach_DocumentSets(DocumentSet entity)
		{
			this.SendPropertyChanging();
			entity.VirtualRoomSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSet")]
	public partial class UserSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _VirtualRoomId;
		
		private EntityRef<VirtualRoomSet> _VirtualRoomSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVirtualRoomIdChanging(int value);
    partial void OnVirtualRoomIdChanged();
    #endregion
		
		public UserSet()
		{
			this._VirtualRoomSet = default(EntityRef<VirtualRoomSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualRoomId", DbType="Int NOT NULL")]
		public int VirtualRoomId
		{
			get
			{
				return this._VirtualRoomId;
			}
			set
			{
				if ((this._VirtualRoomId != value))
				{
					if (this._VirtualRoomSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVirtualRoomIdChanging(value);
					this.SendPropertyChanging();
					this._VirtualRoomId = value;
					this.SendPropertyChanged("VirtualRoomId");
					this.OnVirtualRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VirtualRoomSet_UserSet", Storage="_VirtualRoomSet", ThisKey="VirtualRoomId", OtherKey="Id", IsForeignKey=true)]
		public VirtualRoomSet VirtualRoomSet
		{
			get
			{
				return this._VirtualRoomSet.Entity;
			}
			set
			{
				VirtualRoomSet previousValue = this._VirtualRoomSet.Entity;
				if (((previousValue != value) 
							|| (this._VirtualRoomSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VirtualRoomSet.Entity = null;
						previousValue.UserSets.Remove(this);
					}
					this._VirtualRoomSet.Entity = value;
					if ((value != null))
					{
						value.UserSets.Add(this);
						this._VirtualRoomId = value.Id;
					}
					else
					{
						this._VirtualRoomId = default(int);
					}
					this.SendPropertyChanged("VirtualRoomSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentSet")]
	public partial class DocumentSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Brief;
		
		private System.DateTime _Created;
		
		private System.DateTime _Modified;
		
		private int _VirtualRoomId;
		
		private EntityRef<DocumentSet_BinaryDocument> _DocumentSet_BinaryDocument;
		
		private EntityRef<VirtualRoomSet> _VirtualRoomSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBriefChanging(string value);
    partial void OnBriefChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnVirtualRoomIdChanging(int value);
    partial void OnVirtualRoomIdChanged();
    #endregion
		
		public DocumentSet()
		{
			this._DocumentSet_BinaryDocument = default(EntityRef<DocumentSet_BinaryDocument>);
			this._VirtualRoomSet = default(EntityRef<VirtualRoomSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brief", DbType="NVarChar(MAX)")]
		public string Brief
		{
			get
			{
				return this._Brief;
			}
			set
			{
				if ((this._Brief != value))
				{
					this.OnBriefChanging(value);
					this.SendPropertyChanging();
					this._Brief = value;
					this.SendPropertyChanged("Brief");
					this.OnBriefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualRoomId", DbType="Int NOT NULL")]
		public int VirtualRoomId
		{
			get
			{
				return this._VirtualRoomId;
			}
			set
			{
				if ((this._VirtualRoomId != value))
				{
					if (this._VirtualRoomSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVirtualRoomIdChanging(value);
					this.SendPropertyChanging();
					this._VirtualRoomId = value;
					this.SendPropertyChanged("VirtualRoomId");
					this.OnVirtualRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentSet_DocumentSet_BinaryDocument", Storage="_DocumentSet_BinaryDocument", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public DocumentSet_BinaryDocument DocumentSet_BinaryDocument
		{
			get
			{
				return this._DocumentSet_BinaryDocument.Entity;
			}
			set
			{
				DocumentSet_BinaryDocument previousValue = this._DocumentSet_BinaryDocument.Entity;
				if (((previousValue != value) 
							|| (this._DocumentSet_BinaryDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentSet_BinaryDocument.Entity = null;
						previousValue.DocumentSet = null;
					}
					this._DocumentSet_BinaryDocument.Entity = value;
					if ((value != null))
					{
						value.DocumentSet = this;
					}
					this.SendPropertyChanged("DocumentSet_BinaryDocument");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VirtualRoomSet_DocumentSet", Storage="_VirtualRoomSet", ThisKey="VirtualRoomId", OtherKey="Id", IsForeignKey=true)]
		public VirtualRoomSet VirtualRoomSet
		{
			get
			{
				return this._VirtualRoomSet.Entity;
			}
			set
			{
				VirtualRoomSet previousValue = this._VirtualRoomSet.Entity;
				if (((previousValue != value) 
							|| (this._VirtualRoomSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VirtualRoomSet.Entity = null;
						previousValue.DocumentSets.Remove(this);
					}
					this._VirtualRoomSet.Entity = value;
					if ((value != null))
					{
						value.DocumentSets.Add(this);
						this._VirtualRoomId = value.Id;
					}
					else
					{
						this._VirtualRoomId = default(int);
					}
					this.SendPropertyChanged("VirtualRoomSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentSet_BinaryDocument")]
	public partial class DocumentSet_BinaryDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Data;
		
		private int _Id;
		
		private EntityRef<DocumentSet> _DocumentSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public DocumentSet_BinaryDocument()
		{
			this._DocumentSet = default(EntityRef<DocumentSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._DocumentSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentSet_DocumentSet_BinaryDocument", Storage="_DocumentSet", ThisKey="Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DocumentSet DocumentSet
		{
			get
			{
				return this._DocumentSet.Entity;
			}
			set
			{
				DocumentSet previousValue = this._DocumentSet.Entity;
				if (((previousValue != value) 
							|| (this._DocumentSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentSet.Entity = null;
						previousValue.DocumentSet_BinaryDocument = null;
					}
					this._DocumentSet.Entity = value;
					if ((value != null))
					{
						value.DocumentSet_BinaryDocument = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("DocumentSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
